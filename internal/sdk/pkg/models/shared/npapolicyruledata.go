// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type NpaPolicyRuleDataAccessMethod string

const (
	NpaPolicyRuleDataAccessMethodClient     NpaPolicyRuleDataAccessMethod = "Client"
	NpaPolicyRuleDataAccessMethodClientless NpaPolicyRuleDataAccessMethod = "Clientless"
)

func (e NpaPolicyRuleDataAccessMethod) ToPointer() *NpaPolicyRuleDataAccessMethod {
	return &e
}

func (e *NpaPolicyRuleDataAccessMethod) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Client":
		fallthrough
	case "Clientless":
		*e = NpaPolicyRuleDataAccessMethod(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicyRuleDataAccessMethod: %v", v)
	}
}

type NpaPolicyRuleDataMatchCriteriaActionActionName string

const (
	NpaPolicyRuleDataMatchCriteriaActionActionNameAllow NpaPolicyRuleDataMatchCriteriaActionActionName = "allow"
	NpaPolicyRuleDataMatchCriteriaActionActionNameBlock NpaPolicyRuleDataMatchCriteriaActionActionName = "block"
)

func (e NpaPolicyRuleDataMatchCriteriaActionActionName) ToPointer() *NpaPolicyRuleDataMatchCriteriaActionActionName {
	return &e
}

func (e *NpaPolicyRuleDataMatchCriteriaActionActionName) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "allow":
		fallthrough
	case "block":
		*e = NpaPolicyRuleDataMatchCriteriaActionActionName(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicyRuleDataMatchCriteriaActionActionName: %v", v)
	}
}

type NpaPolicyRuleDataMatchCriteriaAction struct {
	ActionName *NpaPolicyRuleDataMatchCriteriaActionActionName `json:"action_name,omitempty"`
}

type NpaPolicyRuleDataPolicyType string

const (
	NpaPolicyRuleDataPolicyTypePrivateApp NpaPolicyRuleDataPolicyType = "private-app"
)

func (e NpaPolicyRuleDataPolicyType) ToPointer() *NpaPolicyRuleDataPolicyType {
	return &e
}

func (e *NpaPolicyRuleDataPolicyType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "private-app":
		*e = NpaPolicyRuleDataPolicyType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicyRuleDataPolicyType: %v", v)
	}
}

type NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity string

const (
	NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivityAny NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity = "any"
)

func (e NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity) ToPointer() *NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity {
	return &e
}

func (e *NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "any":
		*e = NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity: %v", v)
	}
}

type NpaPolicyRuleDataPrivateAppsWithActivitiesActivities struct {
	Activity          *NpaPolicyRuleDataPrivateAppsWithActivitiesActivitiesActivity `json:"activity,omitempty"`
	ListOfConstraints []string                                                      `json:"list_of_constraints,omitempty"`
}

type NpaPolicyRuleDataPrivateAppsWithActivities struct {
	Activities []NpaPolicyRuleDataPrivateAppsWithActivitiesActivities `json:"activities,omitempty"`
	AppName    *string                                                `json:"appName,omitempty"`
}

type NpaPolicyRuleDataUserType string

const (
	NpaPolicyRuleDataUserTypeUser NpaPolicyRuleDataUserType = "user"
)

func (e NpaPolicyRuleDataUserType) ToPointer() *NpaPolicyRuleDataUserType {
	return &e
}

func (e *NpaPolicyRuleDataUserType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "user":
		*e = NpaPolicyRuleDataUserType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for NpaPolicyRuleDataUserType: %v", v)
	}
}

type NpaPolicyRuleData struct {
	AccessMethod              *NpaPolicyRuleDataAccessMethod               `json:"access_method,omitempty"`
	BNegateNetLocation        *bool                                        `json:"b_negateNetLocation,omitempty"`
	BNegateSrcCountries       *bool                                        `json:"b_negateSrcCountries,omitempty"`
	Classification            *string                                      `json:"classification,omitempty"`
	DlpActions                []NpaPolicyRuleDlp                           `json:"dlp_actions,omitempty"`
	ExternalDlp               *bool                                        `json:"external_dlp,omitempty"`
	JSONVersion               *int64                                       `json:"json_version,omitempty"`
	MatchCriteriaAction       *NpaPolicyRuleDataMatchCriteriaAction        `json:"match_criteria_action,omitempty"`
	NetLocationObj            []string                                     `json:"net_location_obj,omitempty"`
	OrganizationUnits         []string                                     `json:"organization_units,omitempty"`
	PolicyType                *NpaPolicyRuleDataPolicyType                 `json:"policy_type,omitempty"`
	PrivateAppIds             []string                                     `json:"privateAppIds,omitempty"`
	PrivateAppTagIds          []string                                     `json:"privateAppTagIds,omitempty"`
	PrivateAppTags            []string                                     `json:"privateAppTags,omitempty"`
	PrivateApps               []string                                     `json:"privateApps,omitempty"`
	PrivateAppsWithActivities []NpaPolicyRuleDataPrivateAppsWithActivities `json:"privateAppsWithActivities,omitempty"`
	ShowDlpProfileActionTable *bool                                        `json:"show_dlp_profile_action_table,omitempty"`
	SrcCountries              []string                                     `json:"srcCountries,omitempty"`
	UserGroups                []string                                     `json:"userGroups,omitempty"`
	UserType                  *NpaPolicyRuleDataUserType                   `json:"userType,omitempty"`
	Users                     []string                                     `json:"users,omitempty"`
	Version                   *int64                                       `json:"version,omitempty"`
}
